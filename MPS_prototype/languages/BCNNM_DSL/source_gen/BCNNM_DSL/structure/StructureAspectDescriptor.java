package BCNNM_DSL.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import jetbrains.mps.smodel.runtime.EnumerationDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import jetbrains.mps.smodel.runtime.DataTypeDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.adapter.ids.PrimitiveTypeId;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptApoptosisPathway = createDescriptorForApoptosisPathway();
  /*package*/ final ConceptDescriptor myConceptCell = createDescriptorForCell();
  /*package*/ final ConceptDescriptor myConceptCheckGradientCondigion = createDescriptorForCheckGradientCondigion();
  /*package*/ final ConceptDescriptor myConceptCheckSignalCondition = createDescriptorForCheckSignalCondition();
  /*package*/ final ConceptDescriptor myConceptCondition = createDescriptorForCondition();
  /*package*/ final ConceptDescriptor myConceptConditionDistribution = createDescriptorForConditionDistribution();
  /*package*/ final ConceptDescriptor myConceptConditionReducer = createDescriptorForConditionReducer();
  /*package*/ final ConceptDescriptor myConceptConditionWithFormula = createDescriptorForConditionWithFormula();
  /*package*/ final ConceptDescriptor myConceptDivisionPathway = createDescriptorForDivisionPathway();
  /*package*/ final ConceptDescriptor myConceptSignalPathway = createDescriptorForSignalPathway();
  /*package*/ final ConceptDescriptor myConceptSpace = createDescriptorForSpace();
  /*package*/ final ConceptDescriptor myConceptSpikePathway = createDescriptorForSpikePathway();
  /*package*/ final ConceptDescriptor myConceptSpikingCell = createDescriptorForSpikingCell();
  /*package*/ final ConceptDescriptor myConceptStemCell = createDescriptorForStemCell();
  /*package*/ final EnumerationDescriptor myEnumerationConditionType = new EnumerationDescriptor_ConditionType();
  /*package*/ final EnumerationDescriptor myEnumerationReduceType = new EnumerationDescriptor_ReduceType();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }


  @Override
  public void reportDependencies(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.Dependencies deps) {
    deps.extendedLanguage(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, "jetbrains.mps.lang.core");
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptApoptosisPathway, myConceptCell, myConceptCheckGradientCondigion, myConceptCheckSignalCondition, myConceptCondition, myConceptConditionDistribution, myConceptConditionReducer, myConceptConditionWithFormula, myConceptDivisionPathway, myConceptSignalPathway, myConceptSpace, myConceptSpikePathway, myConceptSpikingCell, myConceptStemCell);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.ApoptosisPathway:
        return myConceptApoptosisPathway;
      case LanguageConceptSwitch.Cell:
        return myConceptCell;
      case LanguageConceptSwitch.CheckGradientCondigion:
        return myConceptCheckGradientCondigion;
      case LanguageConceptSwitch.CheckSignalCondition:
        return myConceptCheckSignalCondition;
      case LanguageConceptSwitch.Condition:
        return myConceptCondition;
      case LanguageConceptSwitch.ConditionDistribution:
        return myConceptConditionDistribution;
      case LanguageConceptSwitch.ConditionReducer:
        return myConceptConditionReducer;
      case LanguageConceptSwitch.ConditionWithFormula:
        return myConceptConditionWithFormula;
      case LanguageConceptSwitch.DivisionPathway:
        return myConceptDivisionPathway;
      case LanguageConceptSwitch.SignalPathway:
        return myConceptSignalPathway;
      case LanguageConceptSwitch.Space:
        return myConceptSpace;
      case LanguageConceptSwitch.SpikePathway:
        return myConceptSpikePathway;
      case LanguageConceptSwitch.SpikingCell:
        return myConceptSpikingCell;
      case LanguageConceptSwitch.StemCell:
        return myConceptStemCell;
      default:
        return null;
    }
  }

  @Override
  public Collection<DataTypeDescriptor> getDataTypeDescriptors() {
    return Arrays.asList(myEnumerationConditionType, myEnumerationReduceType);
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForApoptosisPathway() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("BCNNM_DSL", "ApoptosisPathway", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x5719c93ddd8120caL);
    b.class_(false, false, false);
    b.super_("BCNNM_DSL.structure.SignalPathway", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x5719c93ddd807d0fL);
    b.origin("r:05aa5abd-b9a0-4735-80a0-d81e014acc83(BCNNM_DSL.structure)/6276268823263912138");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCell() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("BCNNM_DSL", "Cell", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x3831396a57ca6a5dL);
    b.class_(false, true, false);
    b.origin("r:05aa5abd-b9a0-4735-80a0-d81e014acc83(BCNNM_DSL.structure)/4049080668884986461");
    b.version(2);
    b.aggregate("pathways", 0x5719c93ddd8119fcL).target(0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x5719c93ddd807d0fL).optional(true).ordered(true).multiple(true).origin("6276268823263910396").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCheckGradientCondigion() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("BCNNM_DSL", "CheckGradientCondigion", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x5719c93ddd812817L);
    b.class_(false, false, false);
    b.super_("BCNNM_DSL.structure.ConditionWithFormula", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x5719c93ddd814255L);
    b.origin("r:05aa5abd-b9a0-4735-80a0-d81e014acc83(BCNNM_DSL.structure)/6276268823263914007");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCheckSignalCondition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("BCNNM_DSL", "CheckSignalCondition", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x5719c93ddd812816L);
    b.class_(false, false, false);
    b.super_("BCNNM_DSL.structure.ConditionWithFormula", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x5719c93ddd814255L);
    b.origin("r:05aa5abd-b9a0-4735-80a0-d81e014acc83(BCNNM_DSL.structure)/6276268823263914006");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCondition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("BCNNM_DSL", "Condition", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x5719c93ddd807d10L);
    b.class_(false, true, false);
    b.origin("r:05aa5abd-b9a0-4735-80a0-d81e014acc83(BCNNM_DSL.structure)/6276268823263870224");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConditionDistribution() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("BCNNM_DSL", "ConditionDistribution", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x197902dbd6380c3cL);
    b.class_(false, false, false);
    b.super_("BCNNM_DSL.structure.Condition", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x5719c93ddd807d10L);
    b.origin("r:05aa5abd-b9a0-4735-80a0-d81e014acc83(BCNNM_DSL.structure)/1835501466345278524");
    b.version(2);
    b.property("distribution", 0x197902dbd6380c3dL).type(PrimitiveTypeId.STRING).origin("1835501466345278525").done();
    b.property("parameters", 0x197902dbd6380c3fL).type(PrimitiveTypeId.STRING).origin("1835501466345278527").done();
    b.property("ligand", 0x197902dbd638b83cL).type(PrimitiveTypeId.STRING).origin("1835501466345322556").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConditionReducer() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("BCNNM_DSL", "ConditionReducer", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x5719c93ddd807d1aL);
    b.class_(false, false, false);
    b.super_("BCNNM_DSL.structure.Condition", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x5719c93ddd807d10L);
    b.origin("r:05aa5abd-b9a0-4735-80a0-d81e014acc83(BCNNM_DSL.structure)/6276268823263870234");
    b.version(2);
    b.property("reduceRule", 0x5719c93ddd807d1bL).type(MetaIdFactory.dataTypeId(0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x5719c93ddd807d1dL)).origin("6276268823263870235").done();
    b.aggregate("conditions", 0x5719c93ddd807d22L).target(0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x5719c93ddd807d10L).optional(true).ordered(true).multiple(true).origin("6276268823263870242").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConditionWithFormula() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("BCNNM_DSL", "ConditionWithFormula", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x5719c93ddd814255L);
    b.class_(false, false, false);
    b.super_("BCNNM_DSL.structure.Condition", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x5719c93ddd807d10L);
    b.origin("r:05aa5abd-b9a0-4735-80a0-d81e014acc83(BCNNM_DSL.structure)/6276268823263920725");
    b.version(2);
    b.property("formula", 0x5719c93ddd814256L).type(PrimitiveTypeId.STRING).origin("6276268823263920726").done();
    b.property("type", 0x5719c93ddd8166b1L).type(MetaIdFactory.dataTypeId(0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x5719c93ddd807d0aL)).origin("6276268823263930033").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDivisionPathway() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("BCNNM_DSL", "DivisionPathway", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x5719c93ddd8120c9L);
    b.class_(false, false, false);
    b.super_("BCNNM_DSL.structure.SignalPathway", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x5719c93ddd807d0fL);
    b.origin("r:05aa5abd-b9a0-4735-80a0-d81e014acc83(BCNNM_DSL.structure)/6276268823263912137");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSignalPathway() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("BCNNM_DSL", "SignalPathway", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x5719c93ddd807d0fL);
    b.class_(false, true, false);
    b.origin("r:05aa5abd-b9a0-4735-80a0-d81e014acc83(BCNNM_DSL.structure)/6276268823263870223");
    b.version(2);
    b.property("frequency", 0x5719c93ddd8120cbL).type(PrimitiveTypeId.INTEGER).origin("6276268823263912139").done();
    b.aggregate("conditions", 0x5719c93ddd807d18L).target(0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x5719c93ddd807d10L).optional(true).ordered(true).multiple(true).origin("6276268823263870232").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSpace() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("BCNNM_DSL", "Space", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x3831396a57cb195fL);
    b.class_(false, false, true);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:05aa5abd-b9a0-4735-80a0-d81e014acc83(BCNNM_DSL.structure)/4049080668885031263");
    b.version(2);
    b.aggregate("cells", 0x3831396a57cb1964L).target(0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x3831396a57ca6a5dL).optional(true).ordered(true).multiple(true).origin("4049080668885031268").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSpikePathway() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("BCNNM_DSL", "SpikePathway", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x5719c93ddd8120c8L);
    b.class_(false, false, false);
    b.super_("BCNNM_DSL.structure.SignalPathway", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x5719c93ddd807d0fL);
    b.origin("r:05aa5abd-b9a0-4735-80a0-d81e014acc83(BCNNM_DSL.structure)/6276268823263912136");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSpikingCell() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("BCNNM_DSL", "SpikingCell", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x3831396a57cb1957L);
    b.class_(false, false, false);
    b.super_("BCNNM_DSL.structure.Cell", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x3831396a57ca6a5dL);
    b.origin("r:05aa5abd-b9a0-4735-80a0-d81e014acc83(BCNNM_DSL.structure)/4049080668885031255");
    b.version(2);
    b.alias("spikingcell");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStemCell() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("BCNNM_DSL", "StemCell", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x3831396a57cb18ebL);
    b.class_(false, false, true);
    b.super_("BCNNM_DSL.structure.Cell", 0x9edcd71856d444c5L, 0xae868ea31c5d7fbbL, 0x3831396a57ca6a5dL);
    b.origin("r:05aa5abd-b9a0-4735-80a0-d81e014acc83(BCNNM_DSL.structure)/4049080668885031147");
    b.version(2);
    b.property("divisionTime", 0x4a9dcbdb890a70fdL).type(PrimitiveTypeId.INTEGER).origin("5376677673907679485").done();
    b.alias("stemcell");
    return b.create();
  }
}
