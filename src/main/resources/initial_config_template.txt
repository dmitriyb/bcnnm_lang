package com.synstorm.DSLCommons;

import com.synstorm.MOC.LibraryFunctions.LibraryFunctions;
import com.synstorm.MOC.LogicObjects.Connection;
import com.synstorm.MOC.LogicObjects.PhysicalObject;
import com.synstorm.DSLCommons.GeneratedMechanisms.*;
import com.synstorm.MOC.LogicObjects.Space;

public class GeneratedConfig implements Configuration {
    @Override
    public void initConfiguration() {
        initMolecules();
        initObjectsTypes();
        initIntraObjectConcentration();
        initMechanisms();
        linkMechanisms();
        transformPathwaysToConditions();
        addMechanismsToObjects();
    }

    // TODO: fix that
    @Override
    public Space createSpace() {
        final SpaceGrid spaceGrid = new SpaceGrid(100, new double[DSLLibrary.INSTANCE.molecules.size()]);
        return new Space(spaceGrid);
    }

    // TODO : fix that
    @Override
    public IEventResponse[] addInitialObjects(final Space space) {
        final int objectType = DSLLibrary.INSTANCE.getDSLObjectTypeByLabel(\"Cell\");
        final DSLLibrary.DSLObject dslObject = DSLLibrary.INSTANCE.getDSLObjectByType(objectType);
        final PhysicalObject startObj = new Cell(objectType, DSLLibrary.INSTANCE.molecules.size());
        dslObject.getMolecules().forEachEntry((s, v) -> {
            startObj.updateSignal(startObj.getId(), startObj.getId(), s, v);
            return true;
        });
        final PhysicalObjectAddResponse startObjResp = new PhysicalObjectAddResponse(space::updateAddObject,
                startObj,100 * (50 * 100 + 50) + 50,1);

        final int cellSpaceConType = DSLLibrary.INSTANCE.getDSLObjectTypeByLabel(\"Cell<=>Space\");
        final Connection cellSpaceCon = new Connection(cellSpaceConType, startObj, space);
        final ConnectionAddResponse cellShellConResp = new ConnectionAddResponse(LogicObject::updateConnect, cellSpaceCon);

        return new IEventResponse[] {startObjResp, cellShellConResp};
    }

    private void initMolecules() {
        {MOLECULES_BLOCK}
    }

    private void initObjectsTypes() {
        DSLLibrary.INSTANCE.addDSLObjectType("Shell");
        DSLLibrary.INSTANCE.addDSLObjectType("Cell");
        DSLLibrary.INSTANCE.addDSLObjectType("Cell=>Shell");
    }

    private void initIntraObjectConcentration() {
        {INTRA_CONCENTRATIONS_BLOCK}
    }

    private void initMechanisms() {
        {MECHANISMS_BLOCK}
    }

    private void linkMechanisms() {
        {LINKS_BLOCK}
    }

    private void addMechanismsToObjects() {
        {MECHANISMS_TO_OBJECTS_BLOCK}
    }

    private void transformPathwaysToConditions() {
        {PATHWAY_TO_CONDITION_BLOCK}
    }
}