package com.synstorm.Configuration;

import com.synstorm.Configuration.Configuration;
import com.synstorm.Configuration.DSLLibrary;
import com.synstorm.DES.IEventResponse;
import com.synstorm.MOC.LogicObjects.Connection;
import com.synstorm.MOC.LogicObjects.LogicObject;
import com.synstorm.MOC.LogicObjects.PhysicalObject;
import com.synstorm.MOC.LogicObjects.Space;
import com.synstorm.MOC.Mechanisms.Dynamic;
import com.synstorm.MOC.Responses.ConnectionAddResponse;
import com.synstorm.MOC.Responses.PhysicalObjectAddResponse;
import com.synstorm.NSDomain.LogicObjects.Cell;
import com.synstorm.NSDomain.Mechanisms.Division;
import com.synstorm.Space.SpaceGrid;

public class GeneratedConfig implements Configuration {
    @Override
    public void initConfiguration() {
        initMolecules();
        initObjectsTypes();
        initIntraObjectConcentration();
        initMechanisms();
        linkMechanisms();
        transformPathwaysToConditions();
        addMechanismsToObjects();
    }

    // TODO: fix that
    @Override
    public Space createSpace() {
        final SpaceGrid spaceGrid = new SpaceGrid(100, new double[DSLLibrary.INSTANCE.molecules.size()]);
        return new Space(spaceGrid);
    }

    // TODO : fix that
    @Override
    public IEventResponse[] addInitialObjects(final Space space) {
        final int objectType = DSLLibrary.INSTANCE.getDSLObjectTypeByLabel("Cell");
        final DSLLibrary.DSLObject dslObject = DSLLibrary.INSTANCE.getDSLObjectByType(objectType);
        final PhysicalObject obj_0 = new Cell(objectType, DSLLibrary.INSTANCE.molecules.size(), space);
        dslObject.getMolecules().forEachEntry((s, v) -> {
            obj_0.updateSignal(obj_0.getId(), obj_0.getId(), s, v);
            return true;
        });
        final PhysicalObjectAddResponse resp_0 = new PhysicalObjectAddResponse(space::updateAddObject,
                obj_0, 100 * (50 * 100 + 50) + 50, 1);
        final ConnectionAddResponse resp_1 = obj_0.connectWithSpace();
        return new IEventResponse[] {resp_0, resp_1};
    }

    private void initMolecules() {
        {MOLECULES_BLOCK}
    }

    private void initObjectsTypes() {
        DSLLibrary.INSTANCE.addDSLObjectType("Shell");
        DSLLibrary.INSTANCE.addDSLObjectType("Cell");
        DSLLibrary.INSTANCE.addDSLObjectType("Cell=>Shell");
    }

    private void initIntraObjectConcentration() {
        {INTRA_CONCENTRATIONS_BLOCK}
    }

    private void initMechanisms() {
        {MECHANISMS_BLOCK}
    }

    private void linkMechanisms() {
        {LINKS_BLOCK}
    }

    private void addMechanismsToObjects() {
        {MECHANISMS_TO_OBJECTS_BLOCK}
    }

    private void transformPathwaysToConditions() {
        {PATHWAY_TO_CONDITION_BLOCK}
    }
}