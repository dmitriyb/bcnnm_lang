% Haskell

SpecsNotation
	# commentary
	:: имя объекта, либо объявление внутренней структуры
	-> входные и возвращаемые значения
	>> наследование
	[] стандартные действия, например, getter, setter, constructor_arg
	{} в наличии нестандартные, определённые в модели действия
	$ список
	$$ мапа
	@ ссылка на существующий объект
TechnicalWords
	internal = переменная используется для внутренних целей и ограничено мапится на конфиг
	external = переменная является отображением внешней конфигурации
	required = обязательная переменная
Glossary
	DES - discrete event system, где происходит обработка событий
	Event / Событие - элементарный объект, с которым работает DES
	Response - объект, возвращаемый DES как результат обработки события
	LogicObject / логический объект - объект симуляции
	Condition / условие - логическое выражение, от выполнения которого зависит запуск конкретной функции
	Shell - специальный тип логического объекта, содержит в себе структуру Space. Объявляется в единственном экземпляре
	MechanismDispatcher - диспетчер механизмов. Для каждого объекта свой. Содержит сопоставления механизмов и условий их исполнения, запускает и останавливает механизмы





class Individual :: 
	# Этот класс содержит все нужные данные по особи
	# и о том, как её вычислять
	variables ::
		internal UUID :: uuid [getter, constructor_arg]
		required external LogicObject>>Shell :: shell {}
			# содержит всю машинерию специального объекта Shell 
		required internal $$<Int, LogicObject> :: indLObjects [standard_map_interfaces]
			# содержит актуальный список объектов особи во время моделирования
		required internal @ModelConfig :: modelConfig {} # <- this is entry point for linkage
			# содержит отображение конфигурации модели на внутренние сущности
		required internal @EventsDispatcher :: eventsDispatcher {}
			# компонент DES, используется для работы с эвентами
		required internal Long :: nextTick
		required internal @IndividualStatistics :: individualStatistics {}
			# нужен для сохранения статистик

	methods :: 
		calculateState -> void -> void :: 
		proceedSpatialResponses -> $IEventResponse -> $$<Int, $<ICondition>> ::
			# обработка всех возможных событий из Space
		unifyStateConditions -> $$<Int, $<ICondition>> -> $$<Int, List<ICondition>> -> $$<Int, $<ICondition>> ::
			# объединяет коллекции изменённых кондишенов по объектам

class LogicObject :: 
	# сущность логического объекта хранит 
	variables :: 
		required internal Int :: objectId [getter, constructor_arg]
		required internal Int :: parentId [getter, constructor_arg]
		required internal Int :: type [constructor_arg]
		required external $Int :: signals 
		required internal @Shell :: spaceShell
		required MechanismDispatcher :: mechanismDispatcher
	methods ::
		calculateConditions -> $ICondition -> $ModelEvent 
		updateConditions -> Int -> Double -> ConditionType -> $ICondition

class MechanismDispatcher ::
	variables ::
		required external $$<ICondition, $Mechanism> :: conditionsToMechanismMap [keyset_getter]
		required external $$<Mechanism, $ICondition> :: mechanismToConditionMap
	methods :: 
		addMechanism -> Mechanism -> $ICondition -> void 
		evaluate -> $ICondition -> $ModelEvent

class Mechanism ::
	variables :: 
		required external MechanismParameters :: [constructor_arg]
		required internal ModelEvent :: modelEvent
	methods :: 
		execute -> void -> IEventResponse

class MechanismParameters ::
	variables ::
		required external $$<Int, Any> :: parameters [getter, constructor_arg]

enum ConditionType: 
	OUTER_CHEM
    INNER_CHEM

interface ICondition :: 
	methods ::
		getConditionType -> void -> ConditionType
		recalculate -> void -> Boolean # when we generate class in dsl this method must contain calculation of condition

interface IChemCondition >> ICondition ::
	methods ::
		getSignalType -> void -> Int
		setSignalValue -> Double -> void

abstract class ChemicalCondition >> IChemCondition ::
	variables ::
		required internal ConditionType :: conditionType [getter, constructor_arg]
		required internal Double :: signalValue [getter, setter]
